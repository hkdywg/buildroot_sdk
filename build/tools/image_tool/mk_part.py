#!/usr/bin/python3
# -*- coding: utf-8 -*-
import logging
import argparse
import os
import sys
from xml_parser import xml_parser

FORMAT = "%(levelname)s: %(message)s"
logging.basicConfig(level=logging.INFO, format=FORMAT)

def parse_args():
    parser = argparse.ArgumentParser(description="Create device_part.h and fw_env.config")
    parser.add_argument("xml", help="path to partition xml")
    parser.add_argument("output", help="output folder")
    parser.add_argument(
                        "--fw_env",
                        help="create fw_env.config with the parameter the script will create device_part.h for u-boot",
                        action="store_true",
                        )
    parser.add_argument(
                        "--block_size",
                        help="set block size for spinand, default is 128KB",
                        default=128 * 1024
                        )
    parser.add_argument("-v", "--verbose", help="increase output verbosity", action="store_true")
    
    args = parser.parse_args()
    if args.verbose:
        logging.debug("Enable more verbose output")
        logging.getLogger().setLevel(level=logging.DEBUG)

    return args

def gen_device_part_h(output, parser):
    logging.info("generating device_part.h")
    parts = parser.parse()
    with open(os.path.join(output, "device_part.h"), "w") as of:
        of.write("/* this should be generated by mk_part.py,")
        of.write("please do not modify this manually*/\n\n")
        of.write("#ifndef __DEVICE_PART_H_\n")
        of.write("#define __DEVICE_PART_H_\n")
        env_exist = True
        env_bak = False

        # genrate  ENV_OFFSET
        if "ENV" in parser.parts:
            label = "ENV"
        elif "U-BOOT ENV" in parser.parts:
            label = "U-BOOT ENV"
        else:
            # if no ENV of U-BOOT ENV has been set in  partition.xm, we assume
            # there is nno  env support
            of.write("#ifndef CONFIG_ENV_IS_NOWHERE\n")
            of.write("#define CONFIG_ENV_IS_NOWHERE\n")
            of.write("#endif\n")
            env_exist = False


def gen_fw_config(output, parser, block_size=128 * 1024):
    logging.info("generate fw_env.config")
    parts = parser.parse()
    part_index = -1
    with open(os.path.join(output, "fw_env.config"), "w") as of:
        for i in range(len(parts)):
            if parts[i]["label"] == "ENV" or parts[i]["label"] == "U-BOOT ENV" or parts[i]["label"] == "ENV_BAK":
                part_index = i
                if parser.storage == "spinand":
                    of.write(
                        "dev/mtd%d 0x%x 0x%x 0x%x\n"
                        % (part_index, 0, parts[part_index]["part_size"], block_size)
                    )
                elif parser.storage == "emmc":
                    of.write(
                        "dev/mmcblk0 0x%x 0x%x\n"
                        % (parts[part_index]["offset"] * 512, parts[part_index]["part_size"])
                    )
                elif parser.storage == "spinor":
                    of.write(
                        "dev/mtd%d 0x%x 0x%x 0x%x\n"
                        % (part_index, 0, parts[part_index]["part_size"], 64 * 1024)
                    )

        if part_index == -1:
            logging.info("there is no env or u-boot env partition in partition.xml, ignore generating fw_env.config")
            if os.path.isfile("fw_env.config"):
                os.remove("fw_env.config")
            return

def main():
    args = parse_args()
    parser = xml_parser(args.xml)
    if not args.fw_env:
        gen_device_part_h(args.output, parser)
    else:
        gen_fw_config(args.output, parser, args.block_size)

if __name__ == "__main__":
    main()


